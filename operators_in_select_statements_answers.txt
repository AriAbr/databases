1. Write out a generic SELECT statement.
  SELECT width
  FROM tables
  WHERE width < 20;

2. Create a fun way to remember the order of operations in a SELECT statement,
such as a mnemonic.

  Seagulls Fly West

3. Given this dogs table, write queries to select the following pieces of data:

Intake teams typically guess the breed of shelter dogs, so the breed column may
have multiple words (for example, "Labrador Collie mix").

- Display the name, gender, and age of all dogs that are part Labrador.
    SELECT name, gender, age
    FROM dogs
    WHERE breed LIKE '%labrador%';

- Display the ids of all dogs that are under 1 year old.
    SELECT id
    FROM dogs
    WHERE age < 1;

- Display the name and age of all dogs that are female and over 35lbs.
    SELECT name, age
    FROM dogs
    WHERE gender = 'F'
    AND weight > 35;

- Display all of the information about all dogs that are not Shepherd mixes.
    SELECT *
    FROM dogs
    WHERE breed NOT LIKE '%shepherd%';

- Display the id, age, weight, and breed of all dogs that are either over 60lbs
or Great Danes.
    SELECT id, age, weight, breed
    FROM dogs
    WHERE weight >60
    OR breed LIKE '%great dane%';

4. Given this cats table, what records are returned from these queries?
  SELECT name, adoption_date FROM cats;
  SELECT name, age FROM cats;

  Since there is no WHERE statement in either query, they will both return
  records for each cat in the table. The first will return the names in one
  column and the corresponding adoption dates, formatted as time stamps, in a
  second column. The second will return the names in one column and the
  corresponding ages in a second column.

5. From the cats table, write queries to select the following pieces of data.
- Display all the information about all of the available cats.
    SELECT *
    FROM cats;

- Display the name and sex of all cats who are 7 years old.
    SELECT name, gender
    FROM cats
    WHERE age = 7;

- Find all of the names of the cats, so you donâ€™t choose duplicate names for new
cats.
    SELECT name
    FROM cats;

6. List each comparison operator and explain when you would use it. Include a
real world example for each.

  < - is less than - could be used to find all books in a table that have less
  than a certain number of pages
  > - is greater than - could be used to find all the buildings in a table that
  are taller than a given height
  <= - is less than or equal to - could be used to find all the people in a
  table that would fit into a tunnel (i.e. are a certain height or shorter)
  >= - is greater than or equal to - could be used to find all the students in a
  table that passed (i.e. got a certain grade or higher)
  = - equals - could be used to find all the fruit in a table that are a given
  color
  != or <> - is not equal to - could be used to find all bulbs in a table that
  do not give off a certain kind of light.
  LIKE - could be used to find all people in a table whose full name contains
  'george' somewhere in it.

7. From the cats table, what data is returned from these queries?
    SELECT name FROM cats WHERE gender = 'F';
      The names of all of the female cats in the cats table.
    SELECT name FROM cats WHERE age <> 3;
      The names of all of the cats in the cats table whose are not 3 years old.
    SELECT ID FROM cats WHERE name != 'Mushi' AND gender = 'M';
      The ids of all of the male cats in the cats table who are not named Mushi.
